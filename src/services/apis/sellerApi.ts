import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import {
  FormDataType,
  SellerCreationRequest,
  SellerResponse,
  AddProductResponse,
  ProductsResponse,
} from '../../interface/sellerTypes/sellerApiTypes';

// Define the seller API using RTK Query
export const sellerApi = createApi({
  reducerPath: 'sellerApi',
  baseQuery: fetchBaseQuery({
    baseUrl: 'http://localhost:8001',
    credentials: 'include',
    prepareHeaders: (headers) => {
      // const token = localStorage.getItem('sellerToken');
      const token = localStorage.getItem('user');

      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }

      headers.set('Content-Type', 'application/json');
      return headers;
    },
  }),
  endpoints: (builder) => ({
    // Mutation to create a new seller
    createSeller: builder.mutation<SellerResponse, SellerCreationRequest>({
      query: (sellerData) => ({
        url: '/api/seller/createseller',
        method: 'POST',
        body: sellerData,
      }),
    }),
    // Mutation to add a new product
    addProduct: builder.mutation<AddProductResponse, FormDataType>({
      query: (formData) => ({
        url: '/api/seller/createproduct',
        method: 'POST',
        body: formData,
      }),
    }),
    // Query to fetch products by seller ID
    fetchProducts: builder.query<ProductsResponse, string>({
      query: (sellerId) => ({
        url: `/api/seller/fetchProducts/${sellerId}`,
        method: 'GET',
      }),
    }),
    // Query to fetch all products
    fetchAllProducts: builder.query<ProductsResponse, void>({
      query: () => ({
        url: '/api/seller/fetchAllProducts',
        method: 'GET',
      }),
    }),
    // Query to get details of a specific product by ID
    getProduct: builder.query<any, string>({
      query: (productId) => {
        console.log(`Fetching product with ID: ${productId}`);
        return {
          url: `/api/seller/getProduct/${productId}`,
          method: 'GET',
        };
      },
    }),
    // Mutation to delete a product by ID
    deleteProduct: builder.mutation<void, string>({
      query: (productId) => ({
        url: `/api/seller/deleteProduct/${productId}`,
        method: 'DELETE',
      }),
    }),
    // Mutation to update an existing product
    updateProduct: builder.mutation<AddProductResponse, { productId: string; formData: FormDataType }>({
      query: ({ productId, formData }) => ({
        url: `/api/seller/updateProduct/${productId}`,
        method: 'PUT',
        body: formData,
      }),
    }),
  }),
});

// Export the hooks generated by RTK Query for each endpoint
export const {
  useCreateSellerMutation,
  useAddProductMutation,
  useFetchProductsQuery,
  useFetchAllProductsQuery,
  useGetProductQuery,
  useDeleteProductMutation,
  useUpdateProductMutation,
} = sellerApi;
